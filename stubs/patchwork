#!/usr/bin/env python
#
# Copyright (c) 2015, The Linux Foundation.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import sys
import os
import os.path
import SimpleXMLRPCServer
import email
import pprint

datadir = None

STATE_LIST = [
      {'id': 1, 'name': 'New'},
      {'id': 2, 'name': 'Under Review'},
      {'id': 3, 'name': 'Accepted'},
      {'id': 4, 'name': 'Rejected'},
      {'id': 5, 'name': 'RFC'},
      {'id': 6, 'name': 'Not Applicable'},
      {'id': 7, 'name': 'Changes Requested'},
      {'id': 8, 'name': 'Awaiting Upstream'},
      {'id': 9, 'name': 'Superseded'},
      {'id': 10, 'name': 'Deferred'}]

PROJECT_LIST = [
      {'linkname': 'stub-test', 'id': 15, 'name': 'Linux Wireless Mailing List'}
      ]

PERSON_LIST = [
      {'email': 'test@example.com', 'user': 'test',
       'name': 'Timo Testi', 'id': 7477 },
      {'email': 'test2@example.com', 'user': 'test',
       'name': 'Timo Testi', 'id': 30052},
      {'email': 'test3@example.com', 'user': 'test',
       'name': 'Timo Testi', 'id': 118371}
      ]

def state_name_by_id(state_id):
      for state in STATE_LIST:
            if state['id'] == state_id:
                  return state['name']

      return None

class Patch():
      hdr_map = {
            'name': 'Subject',
            'submitter': 'From', 
            'date': 'Date',
            'msgid': 'Message-Id',
            'id': 'X-Patchwork-Id',
            'submitter_id': 'X-Submitter-Id', 
            'project': 'X-Project',
            'project_id': 'X-Project-Id', 
            'commit_ref': 'X-Commit-Ref', 
            'state': 'X-State', 
            'state_id': 'X-State-Id', 
            'delegate': 'X-Delegate', 
            'delegate_id': 'X-Delegate-Id', 

            # Note: 'filename' attribute is special and is stored to
            # self.filename
            }

      # parameters which have to be integers
      hdr_integers = ['id', 'submitter_id', 'project_id', 'state_id',
                      'delegate_id']

      def get_params(self):
            return self.params

      def get_id(self):
            return self.params['id']

      def get_mbox(self):
            return self.msg.as_string()

      def set(self, params):
            for k in params:
                  # state needs special handling, the 'state'
                  # attribute actually contains state_id
                  if k == 'state':
                        state_id = params[k]
                        state_name = state_name_by_id(state_id)

                        self.params['state_id'] = state_id
                        self.params['state'] = state_name
                        continue

                  self.params[k] = params[k]

            self.save()

            return True

      def load(self, filename):
            # file name is special
            self.filename = filename
            self.params['filename'] = os.path.basename(self.filename)

            f = open(self.filename)
            buf = f.read()
            f.close()

            self.msg = email.message_from_string(buf)

            for attr in self.hdr_map.keys():
                  hdr = self.hdr_map[attr]
                  val = self.msg[hdr]
                  self.params[attr] = val

            for hdr in self.hdr_integers:
                  self.params[hdr] = int(self.params[hdr])

      def save(self):
            # update headers in self.msg 
            for attr in self.hdr_map.keys():
                  hdr = self.hdr_map[attr]
                  val = self.params[attr]
                  self.msg.replace_header(hdr, str(val))

            buf = self.msg.as_string()

            f = open(self.filename, 'w')
            f.write(buf)
            f.close()

      def __repr__(self):
            return 'Patch(%s)' % (pprint.pformat(self.params))

      def __init__(self):
            self.params = {}

class PatchContainer():
      def get_patch(self, patch_id):
            return self.patches[patch_id]

      def get_all_patches_as_params(self):
            result = []

            for p in self.patches.values():
                  result.append(p.get_params())

            return result

      def __repr__(self):
            return 'PatchContainer(%s)' % (self.patches)

      def __init__(self, dirname):
            self.patches = {}

            if not os.path.isdir(dirname):
                  print 'directory %s not found' % dirname
                  return

            for dirpath, dirnames, filenames in os.walk(dirname):
                  for name in filenames:
                        # we only use patch files, skip others
                        if not name.endswith('.patch'):
                              continue

                        p = Patch()
                        p.load(os.path.join(dirname, name))
                        self.patches[p.get_id()] = p

class PatchworkStub():
      def state_list(self, search_str='', max_count=0):
            return STATE_LIST

      def project_list(self, search_str='', max_count=0):
            return PROJECT_LIST

      def person_list(self, search_str='', max_count=0):
            return PERSON_LIST

      def _matches_filter(self, patch, filter):
            for f in filter:
                  if patch[f] != filter[f]:
                        return False

            return True

      def patch_list(self, filter={}):
            result = []
            params = self.container.get_all_patches_as_params()

            for p in params:
                  if not self._matches_filter(p, filter):
                        continue

                  result.append(p)

            return result

      def patch_get_mbox(self, patch_id):
            patch = self.container.get_patch(patch_id)
            return patch.get_mbox()

      def patch_set(self, patch_id, params):
            patch = self.container.get_patch(patch_id)
            patch.set(params)

            return True
            
      def run(self):
            self.server.serve_forever()

      def __init__(self, patchesdir, port):
            self.patchesdir = patchesdir
            self.container = PatchContainer(self.patchesdir)

            self.server = SimpleXMLRPCServer.SimpleXMLRPCServer(("localhost", port),
                                                                logRequests=False,
                                                                requestHandler=SimpleXMLRPCServer.SimpleXMLRPCRequestHandler)
            self.server.register_introspection_functions()
            self.server.register_instance(self)

def run_test_load_patches(args):
      container = PatchContainer(datadir)
      pprint.pprint(container.get_all_patches_as_params())

def run_test_set_state(args):
      container = PatchContainer(datadir)
      patch = container.get_patch(1002)

      patch.set({'state_id': 3})
      print patch

def run_test_get_mbox(args):
      container = PatchContainer(datadir)
      patch = container.get_patch(1001)

      print patch.get_mbox()

def run_test(args):
      test = args.test[0]
      if test == 'load-patches':
            run_test_load_patches(args)
      elif test == 'set-state':
            run_test_set_state(args)
      elif test == 'get-mbox':
            run_test_get_mbox(args)
      else:
            print 'unknown test: %s', test

def main():
      global datadir

      if 'STUB_PATCHWORK_DATADIR' in os.environ:
            datadir = os.environ['STUB_PATCHWORK_DATADIR']
      else:
            datadir = '.'

      parser = argparse.ArgumentParser(description='patchwork-stub', prog='')

      parser.add_argument('--version', action='store_true')
      parser.add_argument('--port', action='store', type=int, default=8000)
      parser.add_argument('--test', nargs=1)

      args = parser.parse_args()

      if args.version:
            print 'stub-patchwork'
            print 'STUB_PATCHWORK_DATADIR=%s' % datadir
            sys.exit(0)

      if args.test:
            run_test(args)
            sys.exit(0)

      try:
            stub = PatchworkStub(datadir, port=args.port)
            stub.run()
      except Exception as e:
            print 'Failed to start PatchworkStub RPC server: %s' % e
            sys.exit(1)

if __name__ == "__main__":
      main()
